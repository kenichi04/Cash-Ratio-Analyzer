/*
 * This file is generated by jOOQ.
 */
package com.example.financialdataapp.tables;


import com.example.financialdataapp.Keys;
import com.example.financialdataapp.Public;
import com.example.financialdataapp.tables.FinancialDocument.FinancialDocumentPath;
import com.example.financialdataapp.tables.records.FinancialDataRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialData extends TableImpl<FinancialDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.FINANCIAL_DATA</code>
     */
    public static final FinancialData FINANCIAL_DATA = new FinancialData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FinancialDataRecord> getRecordType() {
        return FinancialDataRecord.class;
    }

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.ID</code>.
     */
    public final TableField<FinancialDataRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.FINANCIAL_DOCUMENT_ID</code>.
     */
    public final TableField<FinancialDataRecord, Long> FINANCIAL_DOCUMENT_ID = createField(DSL.name("FINANCIAL_DOCUMENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.ACCOUNT_ID</code>.
     */
    public final TableField<FinancialDataRecord, String> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.PERIOD_TYPE</code>.
     */
    public final TableField<FinancialDataRecord, String> PERIOD_TYPE = createField(DSL.name("PERIOD_TYPE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.PERIOD_UNIT</code>.
     */
    public final TableField<FinancialDataRecord, String> PERIOD_UNIT = createField(DSL.name("PERIOD_UNIT"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.CONSOLIDATED_TYPE</code>.
     */
    public final TableField<FinancialDataRecord, String> CONSOLIDATED_TYPE = createField(DSL.name("CONSOLIDATED_TYPE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.CONTEXT_REF</code>.
     */
    public final TableField<FinancialDataRecord, String> CONTEXT_REF = createField(DSL.name("CONTEXT_REF"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.AMOUNT</code>.
     */
    public final TableField<FinancialDataRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(20, 4).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.DISPLAY_SCALE</code>.
     */
    public final TableField<FinancialDataRecord, String> DISPLAY_SCALE = createField(DSL.name("DISPLAY_SCALE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DATA.CURRENCY</code>.
     */
    public final TableField<FinancialDataRecord, String> CURRENCY = createField(DSL.name("CURRENCY"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private FinancialData(Name alias, Table<FinancialDataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FinancialData(Name alias, Table<FinancialDataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.FINANCIAL_DATA</code> table reference
     */
    public FinancialData(String alias) {
        this(DSL.name(alias), FINANCIAL_DATA);
    }

    /**
     * Create an aliased <code>PUBLIC.FINANCIAL_DATA</code> table reference
     */
    public FinancialData(Name alias) {
        this(alias, FINANCIAL_DATA);
    }

    /**
     * Create a <code>PUBLIC.FINANCIAL_DATA</code> table reference
     */
    public FinancialData() {
        this(DSL.name("FINANCIAL_DATA"), null);
    }

    public <O extends Record> FinancialData(Table<O> path, ForeignKey<O, FinancialDataRecord> childPath, InverseForeignKey<O, FinancialDataRecord> parentPath) {
        super(path, childPath, parentPath, FINANCIAL_DATA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FinancialDataPath extends FinancialData implements Path<FinancialDataRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FinancialDataPath(Table<O> path, ForeignKey<O, FinancialDataRecord> childPath, InverseForeignKey<O, FinancialDataRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FinancialDataPath(Name alias, Table<FinancialDataRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FinancialDataPath as(String alias) {
            return new FinancialDataPath(DSL.name(alias), this);
        }

        @Override
        public FinancialDataPath as(Name alias) {
            return new FinancialDataPath(alias, this);
        }

        @Override
        public FinancialDataPath as(Table<?> alias) {
            return new FinancialDataPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FinancialDataRecord, Long> getIdentity() {
        return (Identity<FinancialDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FinancialDataRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public List<ForeignKey<FinancialDataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_BD);
    }

    private transient FinancialDocumentPath _financialDocument;

    /**
     * Get the implicit join path to the <code>PUBLIC.FINANCIAL_DOCUMENT</code>
     * table.
     */
    public FinancialDocumentPath financialDocument() {
        if (_financialDocument == null)
            _financialDocument = new FinancialDocumentPath(this, Keys.CONSTRAINT_BD, null);

        return _financialDocument;
    }

    @Override
    public FinancialData as(String alias) {
        return new FinancialData(DSL.name(alias), this);
    }

    @Override
    public FinancialData as(Name alias) {
        return new FinancialData(alias, this);
    }

    @Override
    public FinancialData as(Table<?> alias) {
        return new FinancialData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialData rename(String name) {
        return new FinancialData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialData rename(Name name) {
        return new FinancialData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialData rename(Table<?> name) {
        return new FinancialData(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialData where(Condition condition) {
        return new FinancialData(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialData where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialData where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialData where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialData where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialData where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialData where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialData where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialData whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialData whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
