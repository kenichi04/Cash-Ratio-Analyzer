/*
 * This file is generated by jOOQ.
 */
package com.example.financialdataapp.tables;


import com.example.financialdataapp.Keys;
import com.example.financialdataapp.Public;
import com.example.financialdataapp.tables.records.AccountMasterRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountMaster extends TableImpl<AccountMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.ACCOUNT_MASTER</code>
     */
    public static final AccountMaster ACCOUNT_MASTER = new AccountMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountMasterRecord> getRecordType() {
        return AccountMasterRecord.class;
    }

    /**
     * The column <code>PUBLIC.ACCOUNT_MASTER.ID</code>.
     */
    public final TableField<AccountMasterRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MASTER.CODE</code>.
     */
    public final TableField<AccountMasterRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MASTER.NAME_JP</code>.
     */
    public final TableField<AccountMasterRecord, String> NAME_JP = createField(DSL.name("NAME_JP"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MASTER.NAME_EN</code>.
     */
    public final TableField<AccountMasterRecord, String> NAME_EN = createField(DSL.name("NAME_EN"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT_MASTER.BALANCE</code>.
     */
    public final TableField<AccountMasterRecord, String> BALANCE = createField(DSL.name("BALANCE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private AccountMaster(Name alias, Table<AccountMasterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AccountMaster(Name alias, Table<AccountMasterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_MASTER</code> table reference
     */
    public AccountMaster(String alias) {
        this(DSL.name(alias), ACCOUNT_MASTER);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT_MASTER</code> table reference
     */
    public AccountMaster(Name alias) {
        this(alias, ACCOUNT_MASTER);
    }

    /**
     * Create a <code>PUBLIC.ACCOUNT_MASTER</code> table reference
     */
    public AccountMaster() {
        this(DSL.name("ACCOUNT_MASTER"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AccountMasterRecord, Long> getIdentity() {
        return (Identity<AccountMasterRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountMasterRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<AccountMasterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_43);
    }

    @Override
    public AccountMaster as(String alias) {
        return new AccountMaster(DSL.name(alias), this);
    }

    @Override
    public AccountMaster as(Name alias) {
        return new AccountMaster(alias, this);
    }

    @Override
    public AccountMaster as(Table<?> alias) {
        return new AccountMaster(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountMaster rename(String name) {
        return new AccountMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountMaster rename(Name name) {
        return new AccountMaster(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountMaster rename(Table<?> name) {
        return new AccountMaster(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountMaster where(Condition condition) {
        return new AccountMaster(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountMaster where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountMaster where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountMaster where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountMaster where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountMaster where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountMaster where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountMaster where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountMaster whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountMaster whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
