/*
 * This file is generated by jOOQ.
 */
package com.example.financialdataapp.tables;


import com.example.financialdataapp.Keys;
import com.example.financialdataapp.Public;
import com.example.financialdataapp.tables.records.DocumentMetadataRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentMetadata extends TableImpl<DocumentMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.DOCUMENT_METADATA</code>
     */
    public static final DocumentMetadata DOCUMENT_METADATA = new DocumentMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentMetadataRecord> getRecordType() {
        return DocumentMetadataRecord.class;
    }

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.ID</code>.
     */
    public final TableField<DocumentMetadataRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.DOCUMENT_ID</code>.
     */
    public final TableField<DocumentMetadataRecord, String> DOCUMENT_ID = createField(DSL.name("DOCUMENT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.DESCRIPTION</code>.
     */
    public final TableField<DocumentMetadataRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.EDINET_CODE</code>.
     */
    public final TableField<DocumentMetadataRecord, String> EDINET_CODE = createField(DSL.name("EDINET_CODE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.DOCUMENT_TYPE</code>.
     */
    public final TableField<DocumentMetadataRecord, String> DOCUMENT_TYPE = createField(DSL.name("DOCUMENT_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.FORM_CODE</code>.
     */
    public final TableField<DocumentMetadataRecord, String> FORM_CODE = createField(DSL.name("FORM_CODE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.SUBMISSION_DATE</code>.
     */
    public final TableField<DocumentMetadataRecord, LocalDate> SUBMISSION_DATE = createField(DSL.name("SUBMISSION_DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DOCUMENT_METADATA.PROCESSED</code>.
     */
    public final TableField<DocumentMetadataRecord, Boolean> PROCESSED = createField(DSL.name("PROCESSED"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    private DocumentMetadata(Name alias, Table<DocumentMetadataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DocumentMetadata(Name alias, Table<DocumentMetadataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.DOCUMENT_METADATA</code> table reference
     */
    public DocumentMetadata(String alias) {
        this(DSL.name(alias), DOCUMENT_METADATA);
    }

    /**
     * Create an aliased <code>PUBLIC.DOCUMENT_METADATA</code> table reference
     */
    public DocumentMetadata(Name alias) {
        this(alias, DOCUMENT_METADATA);
    }

    /**
     * Create a <code>PUBLIC.DOCUMENT_METADATA</code> table reference
     */
    public DocumentMetadata() {
        this(DSL.name("DOCUMENT_METADATA"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DocumentMetadataRecord, Long> getIdentity() {
        return (Identity<DocumentMetadataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentMetadataRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<UniqueKey<DocumentMetadataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_FB);
    }

    @Override
    public DocumentMetadata as(String alias) {
        return new DocumentMetadata(DSL.name(alias), this);
    }

    @Override
    public DocumentMetadata as(Name alias) {
        return new DocumentMetadata(alias, this);
    }

    @Override
    public DocumentMetadata as(Table<?> alias) {
        return new DocumentMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentMetadata rename(String name) {
        return new DocumentMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentMetadata rename(Name name) {
        return new DocumentMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentMetadata rename(Table<?> name) {
        return new DocumentMetadata(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentMetadata where(Condition condition) {
        return new DocumentMetadata(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentMetadata where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentMetadata where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentMetadata where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentMetadata where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentMetadata where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentMetadata where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentMetadata where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentMetadata whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentMetadata whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
