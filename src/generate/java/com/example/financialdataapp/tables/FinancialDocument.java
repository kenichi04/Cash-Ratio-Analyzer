/*
 * This file is generated by jOOQ.
 */
package com.example.financialdataapp.tables;


import com.example.financialdataapp.Keys;
import com.example.financialdataapp.Public;
import com.example.financialdataapp.tables.Company.CompanyPath;
import com.example.financialdataapp.tables.FinancialData.FinancialDataPath;
import com.example.financialdataapp.tables.records.FinancialDocumentRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FinancialDocument extends TableImpl<FinancialDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.FINANCIAL_DOCUMENT</code>
     */
    public static final FinancialDocument FINANCIAL_DOCUMENT = new FinancialDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FinancialDocumentRecord> getRecordType() {
        return FinancialDocumentRecord.class;
    }

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.ID</code>.
     */
    public final TableField<FinancialDocumentRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.DOCUMENT_ID</code>.
     */
    public final TableField<FinancialDocumentRecord, String> DOCUMENT_ID = createField(DSL.name("DOCUMENT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.EDINET_CODE</code>.
     */
    public final TableField<FinancialDocumentRecord, String> EDINET_CODE = createField(DSL.name("EDINET_CODE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.DOCUMENT_TYPE</code>.
     */
    public final TableField<FinancialDocumentRecord, String> DOCUMENT_TYPE = createField(DSL.name("DOCUMENT_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.FISCAL_YEAR_END_DATE</code>.
     */
    public final TableField<FinancialDocumentRecord, LocalDate> FISCAL_YEAR_END_DATE = createField(DSL.name("FISCAL_YEAR_END_DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.CURRENCY</code>.
     */
    public final TableField<FinancialDocumentRecord, String> CURRENCY = createField(DSL.name("CURRENCY"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FINANCIAL_DOCUMENT.COMPANY_ID</code>.
     */
    public final TableField<FinancialDocumentRecord, Long> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.BIGINT, this, "");

    private FinancialDocument(Name alias, Table<FinancialDocumentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FinancialDocument(Name alias, Table<FinancialDocumentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.FINANCIAL_DOCUMENT</code> table reference
     */
    public FinancialDocument(String alias) {
        this(DSL.name(alias), FINANCIAL_DOCUMENT);
    }

    /**
     * Create an aliased <code>PUBLIC.FINANCIAL_DOCUMENT</code> table reference
     */
    public FinancialDocument(Name alias) {
        this(alias, FINANCIAL_DOCUMENT);
    }

    /**
     * Create a <code>PUBLIC.FINANCIAL_DOCUMENT</code> table reference
     */
    public FinancialDocument() {
        this(DSL.name("FINANCIAL_DOCUMENT"), null);
    }

    public <O extends Record> FinancialDocument(Table<O> path, ForeignKey<O, FinancialDocumentRecord> childPath, InverseForeignKey<O, FinancialDocumentRecord> parentPath) {
        super(path, childPath, parentPath, FINANCIAL_DOCUMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FinancialDocumentPath extends FinancialDocument implements Path<FinancialDocumentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FinancialDocumentPath(Table<O> path, ForeignKey<O, FinancialDocumentRecord> childPath, InverseForeignKey<O, FinancialDocumentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FinancialDocumentPath(Name alias, Table<FinancialDocumentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FinancialDocumentPath as(String alias) {
            return new FinancialDocumentPath(DSL.name(alias), this);
        }

        @Override
        public FinancialDocumentPath as(Name alias) {
            return new FinancialDocumentPath(alias, this);
        }

        @Override
        public FinancialDocumentPath as(Table<?> alias) {
            return new FinancialDocumentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FinancialDocumentRecord, Long> getIdentity() {
        return (Identity<FinancialDocumentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FinancialDocumentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<FinancialDocumentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_76);
    }

    @Override
    public List<ForeignKey<FinancialDocumentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_764);
    }

    private transient CompanyPath _company;

    /**
     * Get the implicit join path to the <code>PUBLIC.COMPANY</code> table.
     */
    public CompanyPath company() {
        if (_company == null)
            _company = new CompanyPath(this, Keys.CONSTRAINT_764, null);

        return _company;
    }

    private transient FinancialDataPath _financialData;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.FINANCIAL_DATA</code> table
     */
    public FinancialDataPath financialData() {
        if (_financialData == null)
            _financialData = new FinancialDataPath(this, null, Keys.CONSTRAINT_BD.getInverseKey());

        return _financialData;
    }

    @Override
    public FinancialDocument as(String alias) {
        return new FinancialDocument(DSL.name(alias), this);
    }

    @Override
    public FinancialDocument as(Name alias) {
        return new FinancialDocument(alias, this);
    }

    @Override
    public FinancialDocument as(Table<?> alias) {
        return new FinancialDocument(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialDocument rename(String name) {
        return new FinancialDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialDocument rename(Name name) {
        return new FinancialDocument(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FinancialDocument rename(Table<?> name) {
        return new FinancialDocument(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialDocument where(Condition condition) {
        return new FinancialDocument(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialDocument where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialDocument where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialDocument where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialDocument where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialDocument where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialDocument where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FinancialDocument where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialDocument whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FinancialDocument whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
